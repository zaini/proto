// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// enum AccountType {
//   LEARNER
//   TEACHER
//   ADMIN
// }

model User {
  id                Int                 @id @default(autoincrement())
  githubId          String              @unique
  username          String              @unique
  // accountType       AccountType         @default(LEARNER)
  createdAt         DateTime            @default(now())
  classrooms        Classroom[] // Classrooms the User has created
  problems          Problem[] // Problems the User has created
  UsersOnClassrooms UsersOnClassrooms[] // Classrooms the User is a LEARNER in
}

model Classroom {
  id                Int                 @id @default(autoincrement())
  creator           User                @relation(fields: [userId], references: [id])
  userId            Int
  UsersOnClassrooms UsersOnClassrooms[] // The Users who are in this Classroom
  assignments       Assignment[] // The Assignments set for this Classroom
  createdAt         DateTime            @default(now())
}

model UsersOnClassrooms {
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  classroom   Classroom @relation(fields: [classroomId], references: [id])
  classroomId Int
  assignedAt  DateTime  @default(now())

  @@id([userId, classroomId])
}

model Assignment {
  id                    Int                     @id @default(autoincrement())
  classroom             Classroom               @relation(fields: [classroomId], references: [id])
  classroomId           Int
  createdAt             DateTime                @default(now())
  setDate               DateTime
  dueDate               DateTime
  ProblemsOnAssignments ProblemsOnAssignments[]
}

model Problem {
  id                    Int                     @id @default(autoincrement())
  creator               User                    @relation(fields: [userId], references: [id])
  userId                Int
  likes                 Int                     @default(0)
  dislikes              Int                     @default(0)
  specification         Json
  ProblemsOnAssignments ProblemsOnAssignments[]
}

model ProblemsOnAssignments {
  problem      Problem    @relation(fields: [problemId], references: [id])
  problemId    Int
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  assignmentId Int
  assignedAt   DateTime   @default(now())

  @@id([problemId, assignmentId])
}

// HelpRequest, DailyChallenge, CronJobHistory etc.
