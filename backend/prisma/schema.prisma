// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model User {
  id                    Int                    @id @default(autoincrement())
  githubId              String                 @unique
  username              String                 @unique
  createdAt             DateTime               @default(now())
  ownedClassrooms       Classroom[] // Classrooms the User has created
  problems              Problem[] // Problems the User has created
  classrooms            UsersOnClassrooms[] // Classrooms the User is a LEARNER in
  submissions           Submission[]
  assignmentSubmissions AssignmentSubmission[]
  ratings               Rating[]
  testCaseSubmissions   TestCaseSubmission[]
  testCases             TestCase[]
}

model Classroom {
  id          Int                 @id @default(autoincrement())
  name        String              @default("Unnamed Classroom")
  creator     User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  users       UsersOnClassrooms[] // The Users who are in this Classroom
  assignments Assignment[] // The Assignments set for this Classroom
  createdAt   DateTime            @default(now())
  password    String
}

model UsersOnClassrooms {
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  classroom   Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  classroomId Int
  assignedAt  DateTime  @default(now())
  createdAt   DateTime  @default(now())


  @@id([userId, classroomId])
}

model Assignment {
  id                    Int                     @id @default(autoincrement())
  name                  String
  classroom             Classroom               @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  classroomId           Int
  createdAt             DateTime                @default(now())
  setDate               DateTime
  dueDate               DateTime
  problems              ProblemsOnAssignments[]
  assignmentSubmissions AssignmentSubmission[]
}

model Specification {
  id          Int        @id @default(autoincrement())
  title       String
  description String
  initialCode String
  testCases   TestCase[]
  difficulty  Difficulty
  Problem     Problem[]
  createdAt   DateTime   @default(now())

}

model Problem {
  id                    Int                     @id @default(autoincrement())
  creator               User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                Int
  specification         Specification           @relation(fields: [specificationId], references: [id])
  assignments           ProblemsOnAssignments[]
  submission            Submission[]
  assignmentSubmissions AssignmentSubmission[]
  ratings               Rating[]
  specificationId       Int
  createdAt             DateTime                @default(now())

}

model Rating {
  score     Float
  problem   Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  problemId Int
  userId    Int
  createdAt DateTime @default(now())

  @@id([problemId, userId])
}

model TestCase {
  id                  Int                  @id @default(autoincrement())
  stdin               String
  expectedOutput      String
  isHidden            Boolean
  user                User                 @relation(fields: [userId], references: [id])
  testCaseSubmissions TestCaseSubmission[]
  specification       Specification?       @relation(fields: [specificationId], references: [id])
  specificationId     Int?
  userId              Int
  createdAt           DateTime             @default(now())
}

model TestCaseSubmission {
  id             Int         @id @default(autoincrement())
  testCase       TestCase    @relation(fields: [testCaseId], references: [id])
  user           User        @relation(fields: [userId], references: [id])
  passed         Boolean
  stdout         String
  stderr         String
  description    String
  compile_output String
  time           Float
  memory         Float
  testCaseId     Int
  submission     Submission? @relation(fields: [submissionId], references: [id])
  submissionId   Int?
  userId         Int
  createdAt      DateTime    @default(now())

}

model Submission {
  id                    Int                    @id @default(autoincrement())
  user                  User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                Int
  problem               Problem                @relation(fields: [problemId], references: [id], onDelete: Cascade)
  testCaseSubmissions   TestCaseSubmission[]
  problemId             Int
  createdAt             DateTime               @default(now())
  language              Int
  code                  String
  passed                Boolean
  avgTime               Float
  avgMemory             Float
  assignmentSubmissions AssignmentSubmission[]
}

model AssignmentSubmission {
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  problem      Problem    @relation(fields: [problemId], references: [id], onDelete: Cascade)
  submission   Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  userId       Int
  assignmentId Int
  problemId    Int
  submissionId Int
  createdAt    DateTime   @default(now())

  @@id([userId, assignmentId, problemId])
}

model ProblemsOnAssignments {
  problem      Problem    @relation(fields: [problemId], references: [id], onDelete: Cascade)
  problemId    Int
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  assignmentId Int
  assignedAt   DateTime   @default(now())

  @@id([problemId, assignmentId])
}

// HelpRequest, DailyChallenge, CronJobHistory etc.
