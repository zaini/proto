// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// enum AccountType {
//   LEARNER
//   TEACHER
//   ADMIN
// }

model User {
  id                   Int                    @id @default(autoincrement())
  githubId             String                 @unique
  username             String                 @unique
  // accountType       AccountType         @default(LEARNER)
  createdAt            DateTime               @default(now())
  classrooms           Classroom[] // Classrooms the User has created
  problems             Problem[] // Problems the User has created
  UsersOnClassrooms    UsersOnClassrooms[] // Rename this. Classrooms the User is a LEARNER in
  Submission           Submission[]
  AssignmentSubmission AssignmentSubmission[]
  Rating               Rating[]
}

model Classroom {
  id                Int                 @id @default(autoincrement())
  name              String              @default("Unnamed Classroom")
  creator           User                @relation(fields: [userId], references: [id])
  userId            Int
  UsersOnClassrooms UsersOnClassrooms[] // The Users who are in this Classroom
  assignments       Assignment[] // The Assignments set for this Classroom
  createdAt         DateTime            @default(now())
  password          String
}

model UsersOnClassrooms {
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  classroom   Classroom @relation(fields: [classroomId], references: [id])
  classroomId Int
  assignedAt  DateTime  @default(now())

  @@id([userId, classroomId])
}

model Assignment {
  id                    Int                     @id @default(autoincrement())
  name                  String
  classroom             Classroom               @relation(fields: [classroomId], references: [id])
  classroomId           Int
  createdAt             DateTime                @default(now())
  setDate               DateTime
  dueDate               DateTime
  ProblemsOnAssignments ProblemsOnAssignments[]
  AssignmentSubmission  AssignmentSubmission[]
}

model Problem {
  id                    Int                     @id @default(autoincrement())
  creator               User                    @relation(fields: [userId], references: [id])
  userId                Int
  specification         Json
  ProblemsOnAssignments ProblemsOnAssignments[]
  Submission            Submission[]
  AssignmentSubmission  AssignmentSubmission[]
  Ratings               Rating[]
}

model Rating {
  score     Float
  problem   Problem @relation(fields: [problemId], references: [id])
  user      User    @relation(fields: [userId], references: [id])
  problemId Int
  userId    Int

  @@id([problemId, userId])
}

model Submission {
  id                   Int                    @id @default(autoincrement())
  user                 User                   @relation(fields: [userId], references: [id])
  userId               Int
  problem              Problem                @relation(fields: [problemId], references: [id])
  submissionResults    Json
  problemId            Int
  createdAt            DateTime               @default(now())
  language             Int
  code                 String
  passed               Boolean
  avgTime              Float
  avgMemory            Float
  AssignmentSubmission AssignmentSubmission[]
}

model AssignmentSubmission {
  user         User       @relation(fields: [userId], references: [id])
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  problem      Problem    @relation(fields: [problemId], references: [id])
  submission   Submission @relation(fields: [submissionId], references: [id])
  userId       Int
  assignmentId Int
  problemId    Int
  submissionId Int
  createdAt    DateTime   @default(now())

  @@id([userId, assignmentId, problemId])
}

model ProblemsOnAssignments {
  problem      Problem    @relation(fields: [problemId], references: [id])
  problemId    Int
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  assignmentId Int
  assignedAt   DateTime   @default(now())

  @@id([problemId, assignmentId])
}

// HelpRequest, DailyChallenge, CronJobHistory etc.
